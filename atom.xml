<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lalalala</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-01T13:09:34.329Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Super Shiro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c-13章 文件操作基础</title>
    <link href="http://example.com/2022/05/01/c-13%E7%AB%A0-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/05/01/c-13%E7%AB%A0-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-01T09:27:45.000Z</published>
    <updated>2022-05-01T13:09:34.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="13-1-全局变量：定义在函数之外的变量，全局的生存期和作用域"><a href="#13-1-全局变量：定义在函数之外的变量，全局的生存期和作用域" class="headerlink" title="13.1 全局变量：定义在函数之外的变量，全局的生存期和作用域"></a>13.1 全局变量：定义在函数之外的变量，全局的生存期和作用域</h3><p>·定义在函数外面的变量是全局变量<br>·全局变量具有全局的生存期和作用域<br>·它们与任何的函数都无关<br>·任何的函数内部都可以使用它们<br>·全局变量一般放在表头的位置</p><h4 id="全局变量初始化"><a href="#全局变量初始化" class="headerlink" title="全局变量初始化"></a>全局变量初始化</h4><p>·没有做初始化的全局变量会得到0值，指针得到NULL<br>·如何做初始化？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> gAll=<span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> g2=gAll;<span class="comment">//这是不行的，除非gAll加上const，即：</span></span><br><span class="line"><span class="comment">//const int gAll=12；才行</span></span><br></pre></td></tr></table></figure><p>·若在函数里头有同名的变量，全局变量会被隐藏</p><h3 id="13-2静态本地变量：能在函数结束后继续保有原值的本地变量"><a href="#13-2静态本地变量：能在函数结束后继续保有原值的本地变量" class="headerlink" title="13.2静态本地变量：能在函数结束后继续保有原值的本地变量"></a>13.2静态本地变量：能在函数结束后继续保有原值的本地变量</h3><p>·在本地变量前面加上static修饰符会变成静态本地变量<br>·与普通的本地变量不同的是静态本地变量离开后不会被重新初始化<br>·静态本地变量具有全局的生存区，函数内的局部作用域<br>·static在这里的意思是局部作用域(本地可以访问)</p><h3 id="13-3返回指针的函数，使用全局变量的贴士"><a href="#13-3返回指针的函数，使用全局变量的贴士" class="headerlink" title="13.3返回指针的函数，使用全局变量的贴士"></a>13.3返回指针的函数，使用全局变量的贴士</h3><h4 id="返回指针的函数"><a href="#返回指针的函数" class="headerlink" title="返回指针的函数"></a>返回指针的函数</h4><p>·函数返回指针是不安全的（返回一个本地变量的地址是不安全的，可能返回的地址会被分配给另一个函数去使用）<br>·返回全局变量和静态本地变量的地址是安全的<br>·不要使用全局变量在函数间传递参数和结果，尽量少使用全局变量</p><h3 id="13-4-宏定义"><a href="#13-4-宏定义" class="headerlink" title="13.4 宏定义"></a>13.4 宏定义</h3><h4 id="编译预处理指令"><a href="#编译预处理指令" class="headerlink" title="编译预处理指令"></a>编译预处理指令</h4><p>·#开头的是编译预处理指令<br>·#define用来定义一个宏 eg：#define pi 3//作用类似于pi=3，是把正文中的pi用3来代替</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> p1 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p2 p1*2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRT printf(<span class="string">&quot;%f&quot;</span>,p1);\  <span class="comment">//这里是接下去的意思</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,p2) </span><br></pre></td></tr></table></figure><p>·#define_DEBUG—&gt;没有值的宏<br>·编程里面有一些预定的宏，eg_file_和_LINE_</p><h3 id="13-5-带参数的宏"><a href="#13-5-带参数的宏" class="headerlink" title="13.5 带参数的宏"></a>13.5 带参数的宏</h3><h4 id="像函数的宏"><a href="#像函数的宏" class="headerlink" title="像函数的宏"></a>像函数的宏</h4><p>·#define cube(x) ((x)* (x)* (x))<br>·宏可以带参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> cube(x) ((x)* (x)* (x))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cube(<span class="number">5</span>));<span class="comment">//类似函数读入5输出((x)* (x)* (x))的结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·定义带参数的宏的原则<br>·一切都必须要有括号：最后整个宏的值也要有括号<br>·参数出现的所有地方都必须要有括号</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;13-1-全局变量：定义在函数之外的变量，全局的生存期和作用域&quot;&gt;&lt;a href=&quot;#13-1-全局变量：定义在函数之外的变量，全局的生存期和作用域&quot; class=&quot;headerlink&quot; title=&quot;13.1 全局变量：定义在函数之外的变量，全局的生存期和作用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c-第12章 结构体和数据结构基础</title>
    <link href="http://example.com/2022/04/29/c-%E7%AC%AC12%E7%AB%A0-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/04/29/c-%E7%AC%AC12%E7%AB%A0-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</id>
    <published>2022-04-29T13:30:38.000Z</published>
    <updated>2022-05-01T12:28:14.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-1-枚举"><a href="#12-1-枚举" class="headerlink" title="12.1 枚举"></a>12.1 枚举</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举类型的名字 &#123;</span>名字a，……，名字b&#125;；</span><br><span class="line"><span class="comment">//eg:</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">COLOR</span> &#123;</span>red,greem,yellow&#125;;</span><br></pre></td></tr></table></figure><p>·它们作为int类型的常量，值依次从0到n<br>·当需要一些可以排列起来的常量值的时，定义枚举的意义就是给这些常量值名字。<br>·枚举的这些量要放在int main的前面</p><p>·枚举可以用来计算值的数量，省去一次遍历；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">COLOR</span> &#123;</span>red,green,yellow,NumCOLORS&#125;;</span><br></pre></td></tr></table></figure><p>·声明枚举量的时候可以指定值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">COLOR</span> &#123;</span>red=<span class="number">4</span>,green,yellow=<span class="number">8</span>&#125;;\\green是<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="12-2结构类型"><a href="#12-2结构类型" class="headerlink" title="12.2结构类型"></a>12.2结构类型</h3><h4 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h4><p>·声明结构的形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>&#123;</span></span><br><span class="line"><span class="type">int</span> month;</span><br><span class="line"><span class="type">int</span> day;</span><br><span class="line"><span class="type">int</span> year;</span><br><span class="line">&#125;;<span class="comment">//注意这里要加上分号,没有分号的话定义的变量类型无法拿出来使用</span></span><br></pre></td></tr></table></figure><p>·在使用结构的时候：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名 变量名 </span></span><br><span class="line"><span class="class"><span class="title">eg</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">today</span>;</span></span><br></pre></td></tr></table></figure><p>在这之后可以使用today里的三个变量。<br>·另两种种形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125; p1,p2; <span class="comment">//p1和p2都是无名结构，里面都有xy</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125; p1,p2;<span class="comment">//p1和p2 都是point里面有x和y的值t</span></span><br></pre></td></tr></table></figure><h4 id="结构的初始化"><a href="#结构的初始化" class="headerlink" title="结构的初始化"></a>结构的初始化</h4><p>·两种方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">today</span> &#123;</span><span class="number">07</span>,<span class="number">31</span>,<span class="number">2014</span>&#125;;<span class="comment">//类似数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">this</span> <span class="title">month</span>&#123;</span>.month=<span class="number">7</span>,.year=<span class="number">2014</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="结构成员和数组元素的区别"><a href="#结构成员和数组元素的区别" class="headerlink" title="结构成员和数组元素的区别"></a>结构成员和数组元素的区别</h4><p>·结构成员的类型可以不一样，但是数组元素的类型都一样<br>·数组用[]运算符和下标访问成员，结构用.运算符和名字访问来访问成员<br>eg：today.day  p1.x;</p><h4 id="结构运算"><a href="#结构运算" class="headerlink" title="结构运算"></a>结构运算</h4><p>·要访问整个结构，直接用结构变量的名字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于一个已经初始化的结构来说</span></span><br><span class="line">p1=(<span class="keyword">struct</span> point)&#123;<span class="number">2</span>,<span class="number">565</span>&#125;<span class="comment">//相当于再次赋值，（）表示强制转换类型</span></span><br><span class="line">p1=p2;<span class="comment">//p2对p1内的结构成员进行赋值</span></span><br></pre></td></tr></table></figure><p>数组无法做此类运算</p><h4 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h4><p>·和数组不同，结构变量的名字并不是结构变量的地址，必须用&amp;运算符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> *<span class="title">p</span>=</span>&amp;today;</span><br></pre></td></tr></table></figure><h3 id="12-3-结构与函数"><a href="#12-3-结构与函数" class="headerlink" title="12.3 结构与函数"></a>12.3 结构与函数</h3><h4 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h4><p>·整个结构可以作为参数的值传入函数<br>·这个时候相当于是在函数内新建一个结构变量并且复制所调用结构的值<br>·也可以返回一个结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> the 函数名（<span class="class"><span class="keyword">struct</span> 结构名 <span class="title">d</span>）；</span></span><br><span class="line"><span class="class">函数名（变量名）；</span></span><br><span class="line"><span class="class"><span class="title">eg</span>：</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">the</span> <span class="title">numberOFDays</span>(<span class="keyword">struct</span> <span class="title">date</span> <span class="title">d</span>);</span></span><br><span class="line">numberOFDays (today);\\可以单一<span class="keyword">return</span>出某个变量</span><br></pre></td></tr></table></figure><h4 id="输入结构"><a href="#输入结构" class="headerlink" title="输入结构"></a>输入结构</h4><p>·没有直接的方式可以一次scanf一个结构<br>·但可以构造一个函数，在函数内构造一个新的结构把赋值完成的结构传给旧的这个结构</p><p>·这时可以用一个指向结构的指针来解决</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>&#123;</span></span><br><span class="line"><span class="type">int</span> day;</span><br><span class="line"><span class="type">int</span> month;</span><br><span class="line"><span class="type">int</span> year;</span><br><span class="line">&#125; myday;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>*<span class="title">p</span>=</span>&amp;myday;</span><br><span class="line"><span class="comment">//那么如何用指针来表示结构变量中的成员呢？</span></span><br><span class="line"><span class="comment">//(*p).month=12;p.month也是指针</span></span><br><span class="line">p-&gt;month=<span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>·结构指针如何传入函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>&#123;</span></span><br><span class="line"><span class="type">int</span> day;</span><br><span class="line"><span class="type">int</span> month;</span><br><span class="line"><span class="type">int</span> year;</span><br><span class="line">&#125; myday;</span><br><span class="line">getmyday(&amp;myday);<span class="comment">//直接取地址符不用再用一个指针来指向它</span></span><br><span class="line"><span class="comment">//在表头的getmyday是这样的：</span></span><br><span class="line">getmyday(<span class="keyword">struct</span> date *p);</span><br></pre></td></tr></table></figure><h3 id="12-4-结构中的结构"><a href="#12-4-结构中的结构" class="headerlink" title="12.4 结构中的结构"></a>12.4 结构中的结构</h3><h4 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time</span>&#123;</span></span><br><span class="line"><span class="type">int</span> hour;</span><br><span class="line"><span class="type">int</span> minute;</span><br><span class="line"><span class="type">int</span> second;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time</span> <span class="title">testtime</span>[3]=</span>&#123;</span><br><span class="line">&#123;<span class="number">11</span>,<span class="number">33</span>,<span class="number">53</span>&#125;,&#123;<span class="number">11</span>,<span class="number">33</span>,<span class="number">44</span>&#125;,&#123;<span class="number">3</span>,<span class="number">45</span>,<span class="number">56</span>&#125;</span><br><span class="line">&#125;;<span class="comment">//之后可以把testtime[1]单独拿出来使用</span></span><br></pre></td></tr></table></figure><h4 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">pt1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">pt2</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这时候rectangle就是一个嵌套结构</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span> <span class="title">r</span>,*<span class="title">rp</span>//定义了<span class="title">r</span>和<span class="title">r</span>的指针</span></span><br><span class="line"><span class="class"><span class="title">rp</span>=</span>&amp;r;</span><br></pre></td></tr></table></figure><p>·这里就可以有r.pt1.x、rp-&gt;pt1.x,但是没有rp-&gt;pt1-&gt;x(因为pt1不是指针)<br>·如果是结构中结构的数组则是这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">pt1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">pt2</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span> <span class="title">pp</span>[2]=</span>&#123;</span><br><span class="line">&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;&#125;,</span><br><span class="line">&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="12-5-类型定义"><a href="#12-5-类型定义" class="headerlink" title="12.5 类型定义"></a>12.5 类型定义</h3><p>类型定义的初衷是为了让我们不用写struct（雾）</p><h4 id="自定义数据类型（typedef）"><a href="#自定义数据类型（typedef）" class="headerlink" title="自定义数据类型（typedef）"></a>自定义数据类型（typedef）</h4><p>·typedef int Length<br>使得Length成为int类型的别名，Length可以代替int出现<br>同样的可以用在int身上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125; num;<span class="comment">//这里的num不是定义一个新的point结构，而是把struct point的作用附加到num身上</span></span><br><span class="line">num d=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;；<span class="comment">//此时d是被定义的一个新的结构</span></span><br></pre></td></tr></table></figure><h3 id="12-6联合"><a href="#12-6联合" class="headerlink" title="12.6联合"></a>12.6联合</h3><p>·union在写法上与struct基本一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">AnElt</span>&#123;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">&#125;elt <span class="number">1</span>,elt <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>·这里是大家联合使用同一个空间，同一时间下只有一个成员是有效的<br>·union的大小是最大的成员<br>·初始化时对第一个成员进行初始化<br>·union主要用在以下的一个情景：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> ch[<span class="keyword">sizeof</span>(<span class="type">int</span>)];</span><br><span class="line">&#125; CHI;</span><br></pre></td></tr></table></figure><p>·用途：比如要把一个整数写到二进制里头union可以作为媒介。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;12-1-枚举&quot;&gt;&lt;a href=&quot;#12-1-枚举&quot; class=&quot;headerlink&quot; title=&quot;12.1 枚举&quot;&gt;&lt;/a&gt;12.1 枚举&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>”c-字符串数组及函数“</title>
    <link href="http://example.com/2022/04/29/%E2%80%9Dc-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%8F%8A%E5%87%BD%E6%95%B0%E2%80%9C/"/>
    <id>http://example.com/2022/04/29/%E2%80%9Dc-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%8F%8A%E5%87%BD%E6%95%B0%E2%80%9C/</id>
    <published>2022-04-29T07:51:28.000Z</published>
    <updated>2022-05-01T12:28:22.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串数组及函数"><a href="#字符串数组及函数" class="headerlink" title="字符串数组及函数"></a>字符串数组及函数</h2><h3 id="1-1-字符串数组"><a href="#1-1-字符串数组" class="headerlink" title="1.1 字符串数组"></a>1.1 字符串数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>**a;</span><br></pre></td></tr></table></figure><p>a是一个指针，指向另一个指针，那个指针指向另一个字符（串）</p><h4 id="char-a-与char-a的区别"><a href="#char-a-与char-a的区别" class="headerlink" title="char a[][]与char* a的区别"></a>char a[][]与char* a的区别</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[][<span class="number">10</span>]; <span class="comment">//意思是有n个字符串，每个字符串的所占的空间不超过10。</span></span><br><span class="line"><span class="type">char</span> *a <span class="comment">//意思是有n个指针，没个对应一个字符串。</span></span><br></pre></td></tr></table></figure><h3 id="1-2-程序参数"><a href="#1-2-程序参数" class="headerlink" title="1.2 程序参数"></a>1.2 程序参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> <span class="type">const</span>*argv[])</span></span><br></pre></td></tr></table></figure><h4 id="1-3-1-putchar函数"><a href="#1-3-1-putchar函数" class="headerlink" title="1.3.1 putchar函数"></a>1.3.1 putchar函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br></pre></td></tr></table></figure><p>·向标准输出写一个字符<br>·返回写了几个字符，EOF（-1）表示失败<br>（作用有些类似于printf）<br>·putchar对指针输出的是原原本本的（指针所对的某个位置），但是对于printf来说，输出指向字符串数组的指针的数组名，输出的会是第一个字符串（无论是一维还是二维）</p><h4 id="1-3-1-getchar函数"><a href="#1-3-1-getchar函数" class="headerlink" title="1.3.1 getchar函数"></a>1.3.1 getchar函数</h4><p>·从标准输入读一个字符<br>·返回类型是int是为了返回EOF(-1)<br>（作用有些类似于scanf）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> c;</span><br><span class="line">c=getchar()</span><br></pre></td></tr></table></figure><p>个人认为：之所以要用getchar和putchar来输入输出字符，是因为scanf和printf的%c和%s使用较为麻烦</p><h3 id="1-4-字符串函数"><a href="#1-4-字符串函数" class="headerlink" title="1.4 字符串函数"></a>1.4 字符串函数</h3><p>字符串函数需要：include&lt;string.h&gt;</p><h4 id="1-4-1-strlen函数"><a href="#1-4-1-strlen函数" class="headerlink" title="1.4.1 strlen函数"></a>1.4.1 strlen函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">strlen</span>(a);</span><br></pre></td></tr></table></figure><h4 id="1-4-2-strcmp函数"><a href="#1-4-2-strcmp函数" class="headerlink" title="1.4.2 strcmp函数"></a>1.4.2 strcmp函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;adc&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">strcmp</span>(a, b));</span><br></pre></td></tr></table></figure><p>进行比较，&lt;=&gt;分别输出-1，0,1</p><h4 id="1-4-3-strcpy函数"><a href="#1-4-3-strcpy函数" class="headerlink" title="1.4.3 strcpy函数"></a>1.4.3 strcpy函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(dst,src);</span><br></pre></td></tr></table></figure><p>把src的值放到dst里，原函数里定义两个变量有restrict，表明二者不重叠（c99），这就是说，如果hello字符在1-5里面，想把它移到2-6，那是做不到的<br>我们可以利用strcpy函数来复制一个字符串，只能在数组内进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dst[]=<span class="string">&quot;0&quot;</span>;<span class="comment">//要先对其进行初始化</span></span><br><span class="line"><span class="type">char</span> src[<span class="number">6</span>]=&#123;<span class="string">&quot;Hello&quot;</span>&#125;</span><br><span class="line"><span class="type">char</span> dst=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(dst)+<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst,src);</span><br></pre></td></tr></table></figure><h4 id="1-4-4-strcat函数"><a href="#1-4-4-strcat函数" class="headerlink" title="1.4.4 strcat函数"></a>1.4.4 strcat函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcat</span>(s1,s2);</span><br></pre></td></tr></table></figure><p>·把s2拷到s1后面，连接形成一个长的字符串<br>·返回s1<br>·s1必须要有足够的空间</p><ul><li>关于strcpy和strcat两个都存在安全问题，它们都有安全的版本</li></ul><h4 id="1-4-5-strchr和strrchr函数（从左和从右开始）"><a href="#1-4-5-strchr和strrchr函数（从左和从右开始）" class="headerlink" title="1.4.5 strchr和strrchr函数（从左和从右开始）"></a>1.4.5 strchr和strrchr函数（从左和从右开始）</h4><p>如果返回值是NULL表示没有找到<br>举例运用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>*p=<span class="built_in">strchr</span>(a,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);\\输出结果为llo，指针指向字符串数组的第一个地址输出会把整个字符串都输出。如果需要输出的是第二个l只需要输出p+<span class="number">1</span>即可。</span><br><span class="line"><span class="type">char</span>*t=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(p)+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t,p)\\把p以后的东西拷贝的方法</span><br><span class="line"><span class="built_in">free</span>(t);</span><br></pre></td></tr></table></figure><p>那如何输出找出llo后前面的he呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p = <span class="built_in">strchr</span>(s, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p);</span><br><span class="line"><span class="type">char</span> c = *p;</span><br><span class="line">*p = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* t = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t, s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, t);</span><br><span class="line"><span class="built_in">free</span>(t);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串数组及函数&quot;&gt;&lt;a href=&quot;#字符串数组及函数&quot; class=&quot;headerlink&quot; title=&quot;字符串数组及函数&quot;&gt;&lt;/a&gt;字符串数组及函数&lt;/h2&gt;&lt;h3 id=&quot;1-1-字符串数组&quot;&gt;&lt;a href=&quot;#1-1-字符串数组&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>”第11章 指针和数组“</title>
    <link href="http://example.com/2022/04/25/%E2%80%9D%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84%E2%80%9C/"/>
    <id>http://example.com/2022/04/25/%E2%80%9D%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84%E2%80%9C/</id>
    <published>2022-04-25T07:48:10.000Z</published>
    <updated>2022-05-01T12:28:21.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><h3 id="11-1指针和一维数组的关系"><a href="#11-1指针和一维数组的关系" class="headerlink" title="11.1指针和一维数组的关系"></a>11.1指针和一维数组的关系</h3><p>定义一个数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>它的函数名a所表示的就是a[0]的地址，</p><h4 id="指针指向字符串，无法修改，需要引入“字符串-数组”来进行修改；-数组名代表的指针无法进行修改，需要指针指向数组，才能对其进行修改（-a和-p所起的作用是一样的，但是-a无法修改，-p可以修改）"><a href="#指针指向字符串，无法修改，需要引入“字符串-数组”来进行修改；-数组名代表的指针无法进行修改，需要指针指向数组，才能对其进行修改（-a和-p所起的作用是一样的，但是-a无法修改，-p可以修改）" class="headerlink" title="指针指向字符串，无法修改，需要引入“字符串=数组”来进行修改； 数组名代表的指针无法进行修改，需要指针指向数组，才能对其进行修改（* a和* p所起的作用是一样的，但是* a无法修改，* p可以修改）"></a>指针指向字符串，无法修改，需要引入“字符串=数组”来进行修改； 数组名代表的指针无法进行修改，需要指针指向数组，才能对其进行修改（* a和* p所起的作用是一样的，但是* a无法修改，* p可以修改）</h4><p>所以有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a+1==&amp;a[1];</span><br><span class="line">*(a+1)==a[1];</span><br></pre></td></tr></table></figure><h4 id="p-和p-1的区别；"><a href="#p-和p-1的区别；" class="headerlink" title="p++和p+1的区别；"></a>p++和p+1的区别；</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=a;</span><br><span class="line">p++;<span class="comment">//在原来的地址上直接加siezof（int），对其赋值；</span></span><br><span class="line">p+<span class="number">1</span>；<span class="comment">//先让右边的p指向下一个元素，然后让左边的p的地址等于下一个元素的地址；</span></span><br></pre></td></tr></table></figure><p>用两个函数说明:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p = &amp;(arr[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">for</span> (; p &gt;= &amp;arr[<span class="number">2</span>]; p--)</span><br><span class="line">  &#123;</span><br><span class="line">    *(p++) = *p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">f2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p = &amp;(arr[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">for</span> (; p &gt;= &amp;arr[<span class="number">2</span>]; p--)</span><br><span class="line">  &#123;</span><br><span class="line">    *(p+<span class="number">1</span>) = *p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f1因为p在自己的地址上加一减一，陷入死循环，f2也在自己的地址上加一，但没有赋值，所以能离开循环。<br>p++同p+=1，p本身因为赋值指向的变量发生改变，而p+1只是整体暂时地指向了某个变量。<br>所以对于数组而言，需要暂时借用下一个元素的值而不改变指针的指向，+1作为整体即可。</p><h4 id="指针p指向数组b，是不需要-amp-符号的"><a href="#指针p指向数组b，是不需要-amp-符号的" class="headerlink" title="指针p指向数组b，是不需要&amp;符号的"></a>指针p指向数组b，是不需要&amp;符号的</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">12</span>,<span class="number">44</span>&#125;;</span><br><span class="line"><span class="type">int</span>*p=a;</span><br></pre></td></tr></table></figure><h3 id="指针和二维数组的关系"><a href="#指针和二维数组的关系" class="headerlink" title="指针和二维数组的关系"></a>指针和二维数组的关系</h3><h4 id="二维数组行地址和列地址的关系"><a href="#二维数组行地址和列地址的关系" class="headerlink" title="二维数组行地址和列地址的关系"></a>二维数组行地址和列地址的关系</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于一维数组</span></span><br><span class="line"><span class="type">char</span> A[]=&#123; &#125;;</span><br><span class="line"><span class="comment">//A表示的是A[0]的变量地址；而A+1可以表示A[0]的变量地址</span></span><br><span class="line"><span class="comment">//那么定义一个二维数组，有：</span></span><br><span class="line"><span class="type">char</span> a[i][j]=&#123;  &#125;;</span><br><span class="line"><span class="comment">//结论：a表示的是a[0]的变量地址；而a+1表示的是a[0][1]的变量地址，</span></span><br></pre></td></tr></table></figure><p>这里的”1”表示的是增加<br>1* sizeof（int），所以对于一维数组来说是要指向下一个元素的地址。<br>我们用字符来进行理解：假定二维数组第一个元素是”Hello”,那么整个a[0]都在里面<br>因为第二个下标决定字符串的长度，所以二维数组每一行都有j* sizeof（int），那么增加一个sizeof（int）<br>只能从a[0][0]→a[0][1]<br>所以有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i][j]=*(a[i]+j)=*(*(a+i)+j)=(*(a+i))[j];</span><br></pre></td></tr></table></figure><p>（简单记忆：一维数组，元素加一减一只有a能够发生指向性的改变，其它元素的地址只能由a加减来得到；二维数组，元素的加一减一只能由a和a[0]发生指向性的改变，a的加减改变只改变a的一维下标值，而a[0]的加减改变a的二维下标值，不管是一维数组还是二维数组，加减之后得到的整体仍是指针变量,所以我们不考虑它们非指针输出的其它结果，在二维数组里面，a+i,也不考虑结果（但是我们考虑* 后的结果））<br>所以要把整个数组的元素输出，应用一次或两次for循环。<br>a[0]的作用可以延伸到a[i]，故：a与a[i]都是指针变量；</p><h4 id="通过二维数组的行指针和列指针来引号二维数组元素"><a href="#通过二维数组的行指针和列指针来引号二维数组元素" class="headerlink" title="通过二维数组的行指针和列指针来引号二维数组元素"></a>通过二维数组的行指针和列指针来引号二维数组元素</h4><p>因为二维数组里，行指针定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">3</span>][<span class="number">9</span>] = &#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>&#125;;<span class="comment">//这里用字符串数组举例</span></span><br><span class="line"><span class="type">char</span> *p=a;</span><br></pre></td></tr></table></figure><ul><li>p和* a只能表示某个字符串或者是某串数字；<br>所以需要引入列指针来精确地表示某个元素<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">3</span>][<span class="number">9</span>] = &#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> *p=a[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>对于列指针，要从a[0][0]指向某个元素a[m][n],默认数组定义为a[i][j]<br>在将其视为一维数组的情况下，需要跳过”i* n+j”个元素<br>（能够当做一维数组运算的也就说明了为什么在定义二维数组的列指针的时候无须指定它的列数）<em>列指针+n把所有的字符串都放在同一行。</em><br>但是在定义二维数组的时候则相反，若没有定义列数，行指针无法加1<br> <em>行指针+n把字符按行列分列</em></li></ul><p>以下数据可用于验证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int a[3][3] = &#123; &#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125; &#125;;</span></span><br><span class="line"><span class="comment">//char a[3][9] = &#123;&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;&#125;;</span></span><br><span class="line"><span class="comment">//char a[10] = &quot;hello&quot;;</span></span><br><span class="line"><span class="comment">//int a[10]=&#123;1,2,3,4,5&#125;;</span></span><br><span class="line"><span class="comment">//char a[5] = &quot;hello&quot;;</span></span><br><span class="line"><span class="comment">//a[i]=*(a+i)</span></span><br><span class="line"><span class="comment">//printf(&quot;%c&quot;,*a);</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, *(a+1));</span></span><br><span class="line"><span class="comment">//printf(&quot;%p\n&quot;, &amp;a);</span></span><br></pre></td></tr></table></figure><h6 id="对于字符串数组（不论是一维还是二维），让指针指向数组名（即第一个地址）会将第一个字符串全部输出"><a href="#对于字符串数组（不论是一维还是二维），让指针指向数组名（即第一个地址）会将第一个字符串全部输出" class="headerlink" title="对于字符串数组（不论是一维还是二维），让指针指向数组名（即第一个地址）会将第一个字符串全部输出"></a>对于字符串数组（不论是一维还是二维），让指针指向数组名（即第一个地址）会将第一个字符串全部输出</h6><h4 id="11-2-动态内存分配"><a href="#11-2-动态内存分配" class="headerlink" title="11.2 动态内存分配"></a>11.2 动态内存分配</h4><p>对于c89来说，定义一个二维数组无法在定义的时候在[]内输入变量来定义数组的大小，这个时候就需要用到动态内存分配了。<br>动态内存分配是为某个指针分配一段连续的的空间，但对于指针来说，指向不变<br>注意：使用时需要：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include&lt;stdlib.h&gt;</span><br></pre></td></tr></table></figure><h5 id="11-2-1-malloc-函数"><a href="#11-2-1-malloc-函数" class="headerlink" title="11.2.1 malloc 函数"></a>11.2.1 malloc 函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>*p=<span class="literal">NULL</span>;</span><br><span class="line">p=(<span class="type">int</span>*)<span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></table></figure><p>这里的意识是定义一个指针，然后利用sizeof函数，计算得到一个int函数的大小，再进行动态分配，也就是说函数malloc的返回值的void* 类型转换成了int* 类型，申请了一个int大小的字节数赋值给指针p<br>注意：如果是对字符串进行申请，后面的长度需要+1；</p><h5 id="11-2-2-calloc函数"><a href="#11-2-2-calloc函数" class="headerlink" title="11.2.2 calloc函数"></a>11.2.2 calloc函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>*p=<span class="literal">NULL</span>;</span><br><span class="line">p=(<span class="type">float</span>*)<span class="built_in">calloc</span>(len,sizof(<span class="type">int</span>));<span class="comment">//与前者的区别仅在*与，之间；</span></span><br></pre></td></tr></table></figure><h5 id="11-2-3-free函数"><a href="#11-2-3-free函数" class="headerlink" title="11.2.3 free函数"></a>11.2.3 free函数</h5><p>在使用动态内存分配之后需要释放所申请过的储存空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(a); <span class="comment">//以释放内存</span></span><br></pre></td></tr></table></figure><p>注意：free不能够释放指向某个确定的数的指针；</p><h5 id="11-2-4-realloc函数"><a href="#11-2-4-realloc函数" class="headerlink" title="11.2.4 realloc函数"></a>11.2.4 realloc函数</h5><p>改变分配的空间的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="type">int</span> size = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">realloc</span>(p, size);<span class="comment">//指针名，size个字节</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;指针和数组&quot;&gt;&lt;a href=&quot;#指针和数组&quot; class=&quot;headerlink&quot; title=&quot;指针和数组&quot;&gt;&lt;/a&gt;指针和数组&lt;/h1&gt;&lt;h3 id=&quot;11-1指针和一维数组的关系&quot;&gt;&lt;a href=&quot;#11-1指针和一维数组的关系&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c中的%（）代表什么--待补充</title>
    <link href="http://example.com/2022/04/25/%E2%80%9Dc%E4%B8%AD%E7%9A%84-%EF%BC%88%EF%BC%89%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E2%80%9C/"/>
    <id>http://example.com/2022/04/25/%E2%80%9Dc%E4%B8%AD%E7%9A%84-%EF%BC%88%EF%BC%89%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E2%80%9C/</id>
    <published>2022-04-25T06:43:46.000Z</published>
    <updated>2022-05-01T12:28:18.144Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%d  用于10进制整数的输入输出</span><br><span class="line">%x  用于12进制整数的输入输出</span><br><span class="line">%o  用于8进制整数的输入输出</span><br><span class="line">%f  用于浮点数的输出（包括double和float）</span><br><span class="line">%lf 用于浮点数的输入</span><br><span class="line">%c  用于字符的输入输出</span><br><span class="line">%p  用于指针的输入输出</span><br><span class="line">%s  用于字符串的输入输出(%8s表示只能输入八个字符，超出的会被分配给下一个scanf，如果没有会被忽略)</span><br><span class="line">一个scanf只能读入一个单词（到空格、tab、回车）为止</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>“c-第10章字符串”</title>
    <link href="http://example.com/2022/04/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E2%80%9D/"/>
    <id>http://example.com/2022/04/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E2%80%9D/</id>
    <published>2022-04-25T03:52:11.000Z</published>
    <updated>2022-05-01T12:28:19.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第10章-字符串"><a href="#第10章-字符串" class="headerlink" title="第10章 字符串"></a>第10章 字符串</h1><h3 id="10-1字符串变量"><a href="#10-1字符串变量" class="headerlink" title="10.1字符串变量"></a>10.1字符串变量</h3><pre><code>字符串字面量，也称字符串常量，由双引号括起来的字符序列，例如&quot;Hello&quot;和&quot;123&quot;，无论双引号内有多少个字符，都代</code></pre><p>表一个字符串变量。<br>    需要区分：’a’是字符，”abc”是字符串变量<br>    为了确定字符串变量的长度，字符串末尾会添加一个ASCII值为0的空操作符，’\0’作为字符串结束的标志，其作用等价于0,数组计入0的长度但字符串不计入。故可以在中途加入0使字符串提前结束。</p><h3 id="10-2字符串的储存-字符串的初始化"><a href="#10-2字符串的储存-字符串的初始化" class="headerlink" title="10.2字符串的储存(字符串的初始化)"></a>10.2字符串的储存(字符串的初始化)</h3><p>c里面一般将字符串储存在数组内，但仅当字符型数组末尾的元素为’\0’才表明该数组是字符串数组，’\0’也占用一个字节的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">6</span>]=&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//若忽略对数组长度的的声明，系统会利用提供的初值个数初始化数组的大小</span></span><br><span class="line"><span class="type">char</span> str[]=&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> str[]=&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;<span class="comment">//这不是一个字符串数组，只是一个字符型数组</span></span><br><span class="line"><span class="type">char</span> str[]=&#123;<span class="string">&quot;Hello&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;Hello&quot;</span>;   <span class="comment">//这两种方法所定义的默认为字符串数组，长度为字符数+1</span></span><br></pre></td></tr></table></figure><p>通常将一个字符串放在一维数组中，多个字符串放在二维数组中，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char weekly[][10]&#123;&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturady&quot;,&quot;Sunday&quot;&#125;;</span><br></pre></td></tr></table></figure><p>数组的第一维长度代表字符串的个数，可不填，第二维数组应该设立为最长字符串的长度。</p><p>对于指针指向字符串的初始化写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>*a=<span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意：指针直接指向字符串，字符串末尾没有0来多占用一个长度</p><h3 id="10-3-字符指针"><a href="#10-3-字符指针" class="headerlink" title="10.3 字符指针"></a>10.3 字符指针</h3><p>将某个指针指向某个字符串，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *ptr=<span class="string">&quot;Hello&quot;</span>;<span class="comment">//&amp;可加可不加</span></span><br></pre></td></tr></table></figure><p>这种情况下，无法通过改变* par的值对str[0]进行更改。<br>但如果将字符串保存在数组中，可以让一个字符指针指向它。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>]=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> *ptr=str;</span><br></pre></td></tr></table></figure><p>此时可以改变* ptr的值对str[0]进行更改<br>（指针是指向某个字符串，无法对其修改，但数组相当于是说字符串在我这里，这个时候是可以修改的）</p><h3 id="10-4-const-类型限定符"><a href="#10-4-const-类型限定符" class="headerlink" title="10.4 const 类型限定符"></a>10.4 const 类型限定符</h3><p>主要分为两种：<br>①const在* 前面，不可以直接更改指针的值，可以更改指针的指向。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *a=&amp;b;</span><br></pre></td></tr></table></figure><p>但此时可以通过修改b的值更改* a的大小。</p><p>②const在* 后面，可以修改指针的值，但不可以修改指针的指向。[数组a就相当于是一个const在* 后面的指针，无法修改a的指向]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>*<span class="type">const</span> b=&amp;a;</span><br></pre></td></tr></table></figure><h3 id="10-5-字符串的输入"><a href="#10-5-字符串的输入" class="headerlink" title="10.5 字符串的输入"></a>10.5 字符串的输入</h3><p>用一维数组举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>*a[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br></pre></td></tr></table></figure><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>*<span class="built_in">string</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">string</span>);</span><br></pre></td></tr></table></figure><p>以为（因为）char* 是字符串类型，定义了一个字符串类型的string就可以直接用了，但这里的string是没有进行初始化的，所指向的地方并不明确，运行时可能出错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第10章-字符串&quot;&gt;&lt;a href=&quot;#第10章-字符串&quot; class=&quot;headerlink&quot; title=&quot;第10章 字符串&quot;&gt;&lt;/a&gt;第10章 字符串&lt;/h1&gt;&lt;h3 id=&quot;10-1字符串变量&quot;&gt;&lt;a href=&quot;#10-1字符串变量&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>“c-第9章 指针”</title>
    <link href="http://example.com/2022/04/25/%E2%80%9Cc-%E6%8C%87%E9%92%88%E2%80%9D/"/>
    <id>http://example.com/2022/04/25/%E2%80%9Cc-%E6%8C%87%E9%92%88%E2%80%9D/</id>
    <published>2022-04-25T02:59:44.000Z</published>
    <updated>2022-04-25T14:15:23.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第9章-指针"><a href="#第9章-指针" class="headerlink" title="第9章 指针"></a>第9章 指针</h1><h3 id="9-1-变量的内存地址"><a href="#9-1-变量的内存地址" class="headerlink" title="9.1 变量的内存地址"></a>9.1 变量的内存地址</h3><p>利用取地址符“&amp;”来获取变量的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;a);</span><br></pre></td></tr></table></figure><p>我们用%p来输出变量的地址值(以十六进制的无符号整数表现出来)<br>用&amp;作取地址运算符</p><h3 id="9-2-指针变量的定义和初始化"><a href="#9-2-指针变量的定义和初始化" class="headerlink" title="9.2 指针变量的定义和初始化"></a>9.2 指针变量的定义和初始化</h3><p>存放变量的地址需要一种特殊的变量，这种特殊的数据类型就是指针。具有指针类型的变量被称为 指针变量 。<br>指针变量不直接指向某个常数，而是指向某个已知常数值的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a=<span class="literal">NULL</span> <span class="comment">//在不确定指针指向谁的时候，一般定义指针并用NULL对其初始化</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>；</span><br><span class="line"><span class="type">int</span> *b=&amp;c；</span><br></pre></td></tr></table></figure><ul><li>b是一个int类型，指向变量c的指针变量，此时由c的地址值对b进行初始化，此时 </li><li>b作为一个整体，它的值为1，它的地址为c的地址，但不能说指针就是地址。</li></ul><h3 id="9-3-按值调用和按引用调用"><a href="#9-3-按值调用和按引用调用" class="headerlink" title="9.3 按值调用和按引用调用"></a>9.3 按值调用和按引用调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Fun</span><span class="params">(<span class="type">int</span> par)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arg = <span class="number">1</span>;</span><br><span class="line">    Fun(arg);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="type">void</span> <span class="title function_">Fun</span><span class="params">(<span class="type">int</span> par)</span> &#123;</span><br><span class="line">    par = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数Fun里面改变了arg的形参值后，输出实参值，可以发现，实参值并没有发生改变，这是因为传给函数的只是实参值的副本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Fun</span><span class="params">(<span class="type">int</span> *par)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arg = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>*p = &amp;arg;</span><br><span class="line">    Fun(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="type">void</span> <span class="title function_">Fun</span><span class="params">(<span class="type">int</span>*par)</span> &#123;</span><br><span class="line">    *par = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把实参的地址传给形参后，改变形参的地址、值，实参也一样会改变。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第9章-指针&quot;&gt;&lt;a href=&quot;#第9章-指针&quot; class=&quot;headerlink&quot; title=&quot;第9章 指针&quot;&gt;&lt;/a&gt;第9章 指针&lt;/h1&gt;&lt;h3 id=&quot;9-1-变量的内存地址&quot;&gt;&lt;a href=&quot;#9-1-变量的内存地址&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c-第8章  数组和算法基础</title>
    <link href="http://example.com/2022/04/24/c-%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/04/24/c-%E6%95%B0%E7%BB%84/</id>
    <published>2022-04-24T12:54:24.000Z</published>
    <updated>2022-05-01T12:28:16.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/24/c-%E6%95%B0%E7%BB%84/1.jpg" alt="233">//图片测试</p><h1 id="第8章-数组和算法基础"><a href="#第8章-数组和算法基础" class="headerlink" title="第8章  数组和算法基础"></a>第8章  数组和算法基础</h1><h3 id="8-1数组的定义和初始化"><a href="#8-1数组的定义和初始化" class="headerlink" title="8.1数组的定义和初始化"></a>8.1数组的定义和初始化</h3><h4 id="1-数组的含义"><a href="#1-数组的含义" class="headerlink" title="1.数组的含义"></a>1.数组的含义</h4><p>假定有5个人，需要读取他们的成绩，可以定义以下数组来来存储他们的成绩。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> score[<span class="number">5</span>];    <span class="comment">//此时下标个数为1</span></span><br></pre></td></tr></table></figure><p>该语句定义了：类型、名字和元素个数：有5个元素的一维数组score.<br>（注意：数组的下标都是从0开始的）</p><h4 id="2-数组的定义"><a href="#2-数组的定义" class="headerlink" title="2.数组的定义"></a>2.数组的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"><span class="type">int</span> b[a];     <span class="comment">//这是错误的表达方式，c89规定在定义数组的时候不能用变量来定义数组的大小，该定义是非法的。只有在c99中才能这么使用。但这并不意味着下标值不能是变量。</span></span><br></pre></td></tr></table></figure><p>②增加宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> a 5; </span></span><br><span class="line"> <span class="type">int</span> b[a]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>&#125;<span class="comment">//c99专用，作用同加入const</span></span><br></pre></td></tr></table></figure><p>①在非定义时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span> ;</span><br><span class="line">    <span class="type">int</span> b[]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">85</span>,<span class="number">8</span>&#125;;</span><br><span class="line">     b[a]=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[i]);</span><br><span class="line">     &#125; <span class="comment">//输出结果为 2 1 85 8</span></span><br></pre></td></tr></table></figure><h4 id="3-数组的初始化-三种方式"><a href="#3-数组的初始化-三种方式" class="headerlink" title="3.数组的初始化(三种方式)"></a>3.数组的初始化(三种方式)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[ ]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>&#125;; <span class="comment">//系统会利用提供的初值的个数自动初始化数组的长度</span></span><br><span class="line"><span class="type">int</span> c[ ]=&#123;[<span class="number">1</span>]=<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">99</span>]=<span class="number">10</span>&#125;;  <span class="comment">//(c99专用)，对离散型的数据进行赋值</span></span><br></pre></td></tr></table></figure><h4 id="4-数组的元素个数"><a href="#4-数组的元素个数" class="headerlink" title="4.数组的元素个数"></a>4.数组的元素个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="8-2-二位数组的定义和初始化"><a href="#8-2-二位数组的定义和初始化" class="headerlink" title="8.2 二位数组的定义和初始化"></a>8.2 二位数组的定义和初始化</h3><h4 id="1-二维数组一般这么表示"><a href="#1-二维数组一般这么表示" class="headerlink" title="1.二维数组一般这么表示"></a>1.二维数组一般这么表示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][<span class="number">2</span>];\\正常定义时，y轴的大小不为<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="2-二维数组的初始化"><a href="#2-二维数组的初始化" class="headerlink" title="2.二维数组的初始化"></a>2.二维数组的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,&#123;<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">5</span>&#125;,&#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;&#125;;<span class="comment">//两种初始化方式等价,说明,二维数组遍历的顺序应该是按a[0][0] </span></span><br><span class="line"><span class="comment">//a[0][1]的顺序来的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/04/24/c-%E6%95%B0%E7%BB%84/1.jpg&quot; alt=&quot;233&quot;&gt;//图片测试&lt;/p&gt;
&lt;h1 id=&quot;第8章-数组和算法基础&quot;&gt;&lt;a href=&quot;#第8章-数组和算法基础&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单记录一下blog的主题配置</title>
    <link href="http://example.com/2022/04/24/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bblog%E7%9A%84%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/24/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bblog%E7%9A%84%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-24T08:16:00.000Z</published>
    <updated>2022-04-25T07:51:59.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="blog主题配置的简单记录（butterfly）"><a href="#blog主题配置的简单记录（butterfly）" class="headerlink" title="blog主题配置的简单记录（butterfly）"></a>blog主题配置的简单记录（butterfly）</h1><h3 id="1-位于：blog-config-yml，设置网站个人资料"><a href="#1-位于：blog-config-yml，设置网站个人资料" class="headerlink" title="1.位于：blog_config.yml，设置网站个人资料"></a>1.位于：blog_config.yml，设置网站个人资料</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle: &#x27;&#x27;     //副标题</span><br><span class="line">description: &#x27;&#x27;  //个人说明</span><br><span class="line">keywords:</span><br><span class="line">author: John Doe //作者</span><br><span class="line">language: en</span><br><span class="line">timezone: &#x27;&#x27;     //时区（一般不进行配置）   </span><br></pre></td></tr></table></figure><h3 id="2-位于：blog-themes-XXX-source-config-yml，设置主题配置文件"><a href="#2-位于：blog-themes-XXX-source-config-yml，设置主题配置文件" class="headerlink" title="2.位于：blog\themes\XXX\source_config.yml，设置主题配置文件"></a>2.位于：blog\themes\XXX\source_config.yml，设置主题配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: / || fas fa-home</span><br><span class="line">  博文 || fa fa-graduation-cap:</span><br><span class="line">    分类: /categories/ || fa fa-archive</span><br><span class="line">    标签: /tags/ || fa fa-tags</span><br><span class="line">    归档: /archives/ || fa fa-folder-open</span><br><span class="line">  生活 || fas fa-list:</span><br><span class="line">    分享: /shuoshuo/ || fa fa-comments-o</span><br><span class="line">    相册: /photos/ || fa fa-camera-retro</span><br><span class="line">    音乐: /music/ || fa fa-music</span><br><span class="line">    影视: /movies/ || fas fa-video</span><br><span class="line">  友链: /links/ || fa fa-link</span><br><span class="line">  留言板: /comment/ || fa fa-paper-plane</span><br><span class="line">  #留言板: /messageboard/ || fa fa-paper-plane</span><br><span class="line">  关于笔者: /about/ || fas fa-heart  </span><br></pre></td></tr></table></figure><p>受缩进字符的影响，导航菜单有包含关系。</p><h3 id="3-代码块限制设置"><a href="#3-代码块限制设置" class="headerlink" title="3.代码块限制设置"></a>3.代码块限制设置</h3><p>①位于：blog\themes\XXX\source_config.yml,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">highlight_copy: true   //用于打开代码复制</span><br><span class="line">highlight_shrink: false   //代码框展开，反之不展开</span><br><span class="line">highlight_theme: light   //更改代码高亮主题</span><br></pre></td></tr></table></figure><h3 id="4-创建文件夹"><a href="#4-创建文件夹" class="headerlink" title="4.创建文件夹"></a>4.创建文件夹</h3><p>①分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>之后会出现source/categories/index.md文件。<br>然后添加type: “categories” layout:”categories”到内容中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2022-04-24 16:16:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>打开需要分类的文章，为其添加categories属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 233</span><br><span class="line">date: 2022-04-24 16:16:00</span><br><span class="line">categories:</span><br><span class="line"> - c     </span><br><span class="line"> - x       \\一片文章只能属于一个分类，hexo会将其分类嵌套，该文章属于c下方的x分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>②标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>会出现source/tags/index.md文件：</p><h3 id="5-载入图片"><a href="#5-载入图片" class="headerlink" title="5.载入图片"></a>5.载入图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;blog主题配置的简单记录（butterfly）&quot;&gt;&lt;a href=&quot;#blog主题配置的简单记录（butterfly）&quot; class=&quot;headerlink&quot; title=&quot;blog主题配置的简单记录（butterfly）&quot;&gt;&lt;/a&gt;blog主题配置的简单记录（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于Git命令</title>
    <link href="http://example.com/2022/04/23/Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/04/23/Git%E5%91%BD%E4%BB%A4/</id>
    <published>2022-04-23T04:39:45.204Z</published>
    <updated>2022-04-24T13:06:19.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Git命令"><a href="#关于Git命令" class="headerlink" title="关于Git命令"></a>关于Git命令</h1><h3 id="新建新文章"><a href="#新建新文章" class="headerlink" title="新建新文章"></a>新建新文章</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n “新文章名称”</span><br></pre></td></tr></table></figure><h3 id="创建新分类"><a href="#创建新分类" class="headerlink" title="创建新分类"></a>创建新分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h3 id="创建新标签"><a href="#创建新标签" class="headerlink" title="创建新标签"></a>创建新标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Git命令&quot;&gt;&lt;a href=&quot;#关于Git命令&quot; class=&quot;headerlink&quot; title=&quot;关于Git命令&quot;&gt;&lt;/a&gt;关于Git命令&lt;/h1&gt;&lt;h3 id=&quot;新建新文章&quot;&gt;&lt;a href=&quot;#新建新文章&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
</feed>
